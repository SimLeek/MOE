// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ORBDATA_CVFB_H_
#define FLATBUFFERS_GENERATED_ORBDATA_CVFB_H_

#include "flatbuffers/flatbuffers.h"

#include "ocv_kps_generated.h"
#include "orb_settings_generated.h"
#include "ocv_mat_generated.h"

namespace cvfb {

struct OrbData;
struct OrbDataBuilder;

enum OrbDataUnion : uint8_t {
  OrbDataUnion_NONE = 0,
  OrbDataUnion_OcvMat = 1,
  OrbDataUnion_OcvKpsAndDescs = 2,
  OrbDataUnion_OrbSettings = 3,
  OrbDataUnion_MIN = OrbDataUnion_NONE,
  OrbDataUnion_MAX = OrbDataUnion_OrbSettings
};

inline const OrbDataUnion (&EnumValuesOrbDataUnion())[4] {
  static const OrbDataUnion values[] = {
    OrbDataUnion_NONE,
    OrbDataUnion_OcvMat,
    OrbDataUnion_OcvKpsAndDescs,
    OrbDataUnion_OrbSettings
  };
  return values;
}

inline const char * const *EnumNamesOrbDataUnion() {
  static const char * const names[5] = {
    "NONE",
    "OcvMat",
    "OcvKpsAndDescs",
    "OrbSettings",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrbDataUnion(OrbDataUnion e) {
  if (flatbuffers::IsOutRange(e, OrbDataUnion_NONE, OrbDataUnion_OrbSettings)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrbDataUnion()[index];
}

template<typename T> struct OrbDataUnionTraits {
  static const OrbDataUnion enum_value = OrbDataUnion_NONE;
};

template<> struct OrbDataUnionTraits<cvfb::OcvMat> {
  static const OrbDataUnion enum_value = OrbDataUnion_OcvMat;
};

template<> struct OrbDataUnionTraits<cvfb::OcvKpsAndDescs> {
  static const OrbDataUnion enum_value = OrbDataUnion_OcvKpsAndDescs;
};

template<> struct OrbDataUnionTraits<cvfb::OrbSettings> {
  static const OrbDataUnion enum_value = OrbDataUnion_OrbSettings;
};

bool VerifyOrbDataUnion(flatbuffers::Verifier &verifier, const void *obj, OrbDataUnion type);
bool VerifyOrbDataUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct OrbData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrbDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6
  };
  cvfb::OrbDataUnion data_type() const {
    return static_cast<cvfb::OrbDataUnion>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const cvfb::OcvMat *data_as_OcvMat() const {
    return data_type() == cvfb::OrbDataUnion_OcvMat ? static_cast<const cvfb::OcvMat *>(data()) : nullptr;
  }
  const cvfb::OcvKpsAndDescs *data_as_OcvKpsAndDescs() const {
    return data_type() == cvfb::OrbDataUnion_OcvKpsAndDescs ? static_cast<const cvfb::OcvKpsAndDescs *>(data()) : nullptr;
  }
  const cvfb::OrbSettings *data_as_OrbSettings() const {
    return data_type() == cvfb::OrbDataUnion_OrbSettings ? static_cast<const cvfb::OrbSettings *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyOrbDataUnion(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const cvfb::OcvMat *OrbData::data_as<cvfb::OcvMat>() const {
  return data_as_OcvMat();
}

template<> inline const cvfb::OcvKpsAndDescs *OrbData::data_as<cvfb::OcvKpsAndDescs>() const {
  return data_as_OcvKpsAndDescs();
}

template<> inline const cvfb::OrbSettings *OrbData::data_as<cvfb::OrbSettings>() const {
  return data_as_OrbSettings();
}

struct OrbDataBuilder {
  typedef OrbData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data_type(cvfb::OrbDataUnion data_type) {
    fbb_.AddElement<uint8_t>(OrbData::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(OrbData::VT_DATA, data);
  }
  explicit OrbDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OrbData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OrbData>(end);
    return o;
  }
};

inline flatbuffers::Offset<OrbData> CreateOrbData(
    flatbuffers::FlatBufferBuilder &_fbb,
    cvfb::OrbDataUnion data_type = cvfb::OrbDataUnion_NONE,
    flatbuffers::Offset<void> data = 0) {
  OrbDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyOrbDataUnion(flatbuffers::Verifier &verifier, const void *obj, OrbDataUnion type) {
  switch (type) {
    case OrbDataUnion_NONE: {
      return true;
    }
    case OrbDataUnion_OcvMat: {
      auto ptr = reinterpret_cast<const cvfb::OcvMat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OrbDataUnion_OcvKpsAndDescs: {
      auto ptr = reinterpret_cast<const cvfb::OcvKpsAndDescs *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OrbDataUnion_OrbSettings: {
      auto ptr = reinterpret_cast<const cvfb::OrbSettings *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyOrbDataUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOrbDataUnion(
        verifier,  values->Get(i), types->GetEnum<OrbDataUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const cvfb::OrbData *GetOrbData(const void *buf) {
  return flatbuffers::GetRoot<cvfb::OrbData>(buf);
}

inline const cvfb::OrbData *GetSizePrefixedOrbData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cvfb::OrbData>(buf);
}

inline bool VerifyOrbDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cvfb::OrbData>(nullptr);
}

inline bool VerifySizePrefixedOrbDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cvfb::OrbData>(nullptr);
}

inline void FinishOrbDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OrbData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOrbDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OrbData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cvfb

#endif  // FLATBUFFERS_GENERATED_ORBDATA_CVFB_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OCVMAT_CVFB_H_
#define FLATBUFFERS_GENERATED_OCVMAT_CVFB_H_

#include "flatbuffers/flatbuffers.h"

namespace cvfb {

struct OcvMat;
struct OcvMatBuilder;

struct OcvMat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OcvMatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROWS = 4,
    VT_COLS = 6,
    VT_ELT_TYPE = 8,
    VT_ELT_SIZE = 10,
    VT_MAT_DATA = 12
  };
  int32_t rows() const {
    return GetField<int32_t>(VT_ROWS, 0);
  }
  int32_t cols() const {
    return GetField<int32_t>(VT_COLS, 0);
  }
  int32_t elt_type() const {
    return GetField<int32_t>(VT_ELT_TYPE, 0);
  }
  int32_t elt_size() const {
    return GetField<int32_t>(VT_ELT_SIZE, 0);
  }
  const flatbuffers::Vector<int8_t> *mat_data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_MAT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROWS, 4) &&
           VerifyField<int32_t>(verifier, VT_COLS, 4) &&
           VerifyField<int32_t>(verifier, VT_ELT_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_ELT_SIZE, 4) &&
           VerifyOffset(verifier, VT_MAT_DATA) &&
           verifier.VerifyVector(mat_data()) &&
           verifier.EndTable();
  }
};

struct OcvMatBuilder {
  typedef OcvMat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) {
    fbb_.AddElement<int32_t>(OcvMat::VT_ROWS, rows, 0);
  }
  void add_cols(int32_t cols) {
    fbb_.AddElement<int32_t>(OcvMat::VT_COLS, cols, 0);
  }
  void add_elt_type(int32_t elt_type) {
    fbb_.AddElement<int32_t>(OcvMat::VT_ELT_TYPE, elt_type, 0);
  }
  void add_elt_size(int32_t elt_size) {
    fbb_.AddElement<int32_t>(OcvMat::VT_ELT_SIZE, elt_size, 0);
  }
  void add_mat_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> mat_data) {
    fbb_.AddOffset(OcvMat::VT_MAT_DATA, mat_data);
  }
  explicit OcvMatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OcvMat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OcvMat>(end);
    return o;
  }
};

inline flatbuffers::Offset<OcvMat> CreateOcvMat(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    int32_t elt_type = 0,
    int32_t elt_size = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> mat_data = 0) {
  OcvMatBuilder builder_(_fbb);
  builder_.add_mat_data(mat_data);
  builder_.add_elt_size(elt_size);
  builder_.add_elt_type(elt_type);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

inline flatbuffers::Offset<OcvMat> CreateOcvMatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    int32_t elt_type = 0,
    int32_t elt_size = 0,
    const std::vector<int8_t> *mat_data = nullptr) {
  auto mat_data__ = mat_data ? _fbb.CreateVector<int8_t>(*mat_data) : 0;
  return cvfb::CreateOcvMat(
      _fbb,
      rows,
      cols,
      elt_type,
      elt_size,
      mat_data__);
}

inline const cvfb::OcvMat *GetOcvMat(const void *buf) {
  return flatbuffers::GetRoot<cvfb::OcvMat>(buf);
}

inline const cvfb::OcvMat *GetSizePrefixedOcvMat(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cvfb::OcvMat>(buf);
}

inline bool VerifyOcvMatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cvfb::OcvMat>(nullptr);
}

inline bool VerifySizePrefixedOcvMatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cvfb::OcvMat>(nullptr);
}

inline void FinishOcvMatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OcvMat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOcvMatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OcvMat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cvfb

#endif  // FLATBUFFERS_GENERATED_OCVMAT_CVFB_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ORBSETTINGS_CVFB_H_
#define FLATBUFFERS_GENERATED_ORBSETTINGS_CVFB_H_

#include "flatbuffers/flatbuffers.h"

namespace cvfb {

struct OrbSettings;
struct OrbSettingsBuilder;

enum SetOrGet : int8_t {
  SetOrGet_Set = 0,
  SetOrGet_Get = 1,
  SetOrGet_MIN = SetOrGet_Set,
  SetOrGet_MAX = SetOrGet_Get
};

inline const SetOrGet (&EnumValuesSetOrGet())[2] {
  static const SetOrGet values[] = {
    SetOrGet_Set,
    SetOrGet_Get
  };
  return values;
}

inline const char * const *EnumNamesSetOrGet() {
  static const char * const names[3] = {
    "Set",
    "Get",
    nullptr
  };
  return names;
}

inline const char *EnumNameSetOrGet(SetOrGet e) {
  if (flatbuffers::IsOutRange(e, SetOrGet_Set, SetOrGet_Get)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSetOrGet()[index];
}

struct OrbSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrbSettingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SET_OR_GET = 4,
    VT_EDGE_THRESHOLD = 6,
    VT_FAST_THRESHOLD = 8,
    VT_FIRST_LEVEL = 10,
    VT_MAX_FEATURES = 12,
    VT_N_LEVELS = 14,
    VT_SCALE_FACTOR = 16,
    VT_SCORE_TYPE = 18,
    VT_WTA_K = 20
  };
  cvfb::SetOrGet set_or_get() const {
    return static_cast<cvfb::SetOrGet>(GetField<int8_t>(VT_SET_OR_GET, 0));
  }
  int32_t edge_threshold() const {
    return GetField<int32_t>(VT_EDGE_THRESHOLD, 0);
  }
  int32_t fast_threshold() const {
    return GetField<int32_t>(VT_FAST_THRESHOLD, 0);
  }
  int32_t first_level() const {
    return GetField<int32_t>(VT_FIRST_LEVEL, 0);
  }
  int32_t max_features() const {
    return GetField<int32_t>(VT_MAX_FEATURES, 0);
  }
  int32_t n_levels() const {
    return GetField<int32_t>(VT_N_LEVELS, 0);
  }
  double scale_factor() const {
    return GetField<double>(VT_SCALE_FACTOR, 0.0);
  }
  int32_t score_type() const {
    return GetField<int32_t>(VT_SCORE_TYPE, 0);
  }
  int32_t wta_k() const {
    return GetField<int32_t>(VT_WTA_K, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SET_OR_GET, 1) &&
           VerifyField<int32_t>(verifier, VT_EDGE_THRESHOLD, 4) &&
           VerifyField<int32_t>(verifier, VT_FAST_THRESHOLD, 4) &&
           VerifyField<int32_t>(verifier, VT_FIRST_LEVEL, 4) &&
           VerifyField<int32_t>(verifier, VT_MAX_FEATURES, 4) &&
           VerifyField<int32_t>(verifier, VT_N_LEVELS, 4) &&
           VerifyField<double>(verifier, VT_SCALE_FACTOR, 8) &&
           VerifyField<int32_t>(verifier, VT_SCORE_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_WTA_K, 4) &&
           verifier.EndTable();
  }
};

struct OrbSettingsBuilder {
  typedef OrbSettings Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_set_or_get(cvfb::SetOrGet set_or_get) {
    fbb_.AddElement<int8_t>(OrbSettings::VT_SET_OR_GET, static_cast<int8_t>(set_or_get), 0);
  }
  void add_edge_threshold(int32_t edge_threshold) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_EDGE_THRESHOLD, edge_threshold, 0);
  }
  void add_fast_threshold(int32_t fast_threshold) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_FAST_THRESHOLD, fast_threshold, 0);
  }
  void add_first_level(int32_t first_level) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_FIRST_LEVEL, first_level, 0);
  }
  void add_max_features(int32_t max_features) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_MAX_FEATURES, max_features, 0);
  }
  void add_n_levels(int32_t n_levels) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_N_LEVELS, n_levels, 0);
  }
  void add_scale_factor(double scale_factor) {
    fbb_.AddElement<double>(OrbSettings::VT_SCALE_FACTOR, scale_factor, 0.0);
  }
  void add_score_type(int32_t score_type) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_SCORE_TYPE, score_type, 0);
  }
  void add_wta_k(int32_t wta_k) {
    fbb_.AddElement<int32_t>(OrbSettings::VT_WTA_K, wta_k, 0);
  }
  explicit OrbSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OrbSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OrbSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<OrbSettings> CreateOrbSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    cvfb::SetOrGet set_or_get = cvfb::SetOrGet_Set,
    int32_t edge_threshold = 0,
    int32_t fast_threshold = 0,
    int32_t first_level = 0,
    int32_t max_features = 0,
    int32_t n_levels = 0,
    double scale_factor = 0.0,
    int32_t score_type = 0,
    int32_t wta_k = 0) {
  OrbSettingsBuilder builder_(_fbb);
  builder_.add_scale_factor(scale_factor);
  builder_.add_wta_k(wta_k);
  builder_.add_score_type(score_type);
  builder_.add_n_levels(n_levels);
  builder_.add_max_features(max_features);
  builder_.add_first_level(first_level);
  builder_.add_fast_threshold(fast_threshold);
  builder_.add_edge_threshold(edge_threshold);
  builder_.add_set_or_get(set_or_get);
  return builder_.Finish();
}

inline const cvfb::OrbSettings *GetOrbSettings(const void *buf) {
  return flatbuffers::GetRoot<cvfb::OrbSettings>(buf);
}

inline const cvfb::OrbSettings *GetSizePrefixedOrbSettings(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cvfb::OrbSettings>(buf);
}

inline bool VerifyOrbSettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cvfb::OrbSettings>(nullptr);
}

inline bool VerifySizePrefixedOrbSettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cvfb::OrbSettings>(nullptr);
}

inline void FinishOrbSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OrbSettings> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOrbSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cvfb::OrbSettings> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cvfb

#endif  // FLATBUFFERS_GENERATED_ORBSETTINGS_CVFB_H_
